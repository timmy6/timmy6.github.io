{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"Repositories","date":"2022-05-11T02:54:02.124Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-05-11T03:33:53.548Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"你好，Go语言","slug":"hello-wrold","date":"2018-09-11T03:07:50.000Z","updated":"2022-05-11T03:22:40.468Z","comments":true,"path":"2018/09/11/hello-wrold/","link":"","permalink":"http://example.com/2018/09/11/hello-wrold/","excerpt":"","text":"你好，Go语言 Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。 因工作需要，准备入坑，先从环境安装开始，输出一个 Hello World。 环境安装目标 安装完成并运行 Hello World 成功！ 本机系统：macOS High Sierra 10.13.4 Go 版本：1.12 方式一： 通过 brew 安装 1brew install go 根据提示进行安装吧，我使用的 方式二 进行安装的。 方式二： 通过安装包安装 地址：https://dl.google.com/go/go1.12.darwin-amd64.pkg 下载之后直接点击安装，一步步继续即可。 配置环境变量 123456vi ~/.bashrc//新增export GOROOT=/usr/local/goexport GOPATH=/Users/username/go/code //代码目录，自定义即可export PATH=$PATH:$GOPATH/bin 及时生效，请执行命令：source ~&#x2F;.bashrc 如果命令行使用的是zsh，请修改 .zshrc 文件。 123456vi ~/.zshrc//新增export GOROOT=/usr/local/goexport GOPATH=/Users/username/go/code //自定义代码目录export PATH=$PATH:$GOPATH/bin 及时生效，请执行命令：source ~&#x2F;.zshrc 验证是否安装成功，命令行下执行： 目录结构bin 存放编译后可执行的文件。 pkg 存放编译后的应用包。 src 存放应用源代码。 例如： 123456├─ code -- 代码根目录│ ├─ bin│ ├─ pkg│ ├─ src│ ├── hello│ ├── hello.go Hello World 代码 1234567891011//在 hello 目录下创建 hello.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; fmt.Println(&quot;Hello World!&quot;)&#125; 命令行执行： 命令查看完整的命令： go build hello 在src目录或hello目录下执行 go build hello，只在对应当前目录下生成文件。 go install hello 在src目录或hello目录下执行 go install hello，会把编译好的结果移动到 $GOPATH&#x2F;bin。 go run hello 在src目录或hello目录下执行 go run hello，不生成任何文件只运行程序。 go fmt hello 在src目录或hello目录下执行 go run hello，格式化代码，将代码修改成标准格式。 其他命令，需要的时候再进行研究吧。 开发工具GoLand GoLand 是 JetBrains 公司推出的 Go 语言集成开发环境，与我们用的 WebStorm、PhpStorm、PyCharm 是一家，同样支持 Windows、Linux、macOS 等操作系统。 下载地址：https://www.jetbrains.com/go/ 软件是付费的，不过想想办法，软件可以永久激活的。 学习网址 Go语言：https://golang.org/ Go语言中文网：https://studygolang.com/ Go语言包管理：https://gopm.io/","categories":[{"name":"Go开发","slug":"Go开发","permalink":"http://example.com/categories/Go%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"程序员","slug":"程序员","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"}]},{"title":"变量声明","slug":"var_dec","date":"2018-05-11T03:11:38.000Z","updated":"2022-05-11T03:17:32.142Z","comments":true,"path":"2018/05/11/var_dec/","link":"","permalink":"http://example.com/2018/05/11/var_dec/","excerpt":"","text":"概述在声明变量之前，咱们先了解下变量的数据类型，这篇文章主要涉及 字符串、布尔、数字，其他类型后面开篇再说。 数据类型字符串string 只能用一对双引号（””）或反引号（&#96;&#96;）括起来定义，不能用单引号（’’）定义！ 布尔bool 只有 true 和 false，默认为 false。 数字整型 int8 uint8 int16 uint16 int32 uint32 int64 uint64 int uint，具体长度取决于 CPU 位数。 浮点型 float32 float64 常量声明常量，在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。 单个常量声明 第一种：const 变量名称 数据类型 &#x3D; 变量值 如果不赋值，使用的是该数据类型的默认值。 第二种：const 变量名称 &#x3D; 变量值 根据变量值，自行判断数据类型。 多个常量声明 第一种：const 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 … 第二种：const 变量名称,变量名称 … &#x3D; 变量值,变量值 … 测试代码 1234567891011121314151617181920//demo_1.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; const name string = &quot;Tom&quot; fmt.Println(name) const age = 30 fmt.Println(age) const name_1, name_2 string = &quot;Tom&quot;, &quot;Jay&quot; fmt.Println(name_1, name_2) const name_3, age_1 = &quot;Tom&quot;, 30 fmt.Println(name_3, age_1)&#125; 运行结果： 变量声明单个变量声明 第一种：var 变量名称 数据类型 &#x3D; 变量值 如果不赋值，使用的是该数据类型的默认值。 第二种：var 变量名称 &#x3D; 变量值 根据变量值，自行判断数据类型。 第三种：变量名称 :&#x3D; 变量值 省略了 var 和数据类型，变量名称一定要是未声明过的。 多个变量声明 第一种：var 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 … 第二种：var 变量名称,变量名称 … &#x3D; 变量值,变量值 … 第三种：变量名称,变量名称 … :&#x3D; 变量值,变量值 … 测试代码 12345678910111213141516171819202122//demo_2.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; var age_1 uint8 = 31 var age_2 = 32 age_3 := 33 fmt.Println(age_1, age_2, age_3) var age_4, age_5, age_6 int = 31, 32, 33 fmt.Println(age_4, age_5, age_6) var name_1, age_7 = &quot;Tom&quot;, 30 fmt.Println(name_1, age_7) name_2, is_boy, height := &quot;Jay&quot;, true, 180.66 fmt.Println(name_2, is_boy, height)&#125; 运行结果： 输出方法fmt.Print：输出到控制台（仅只是输出） fmt.Println：输出到控制台并换行 fmt.Printf：仅输出格式化的字符串和字符串变量（整型和整型变量不可以） fmt.Sprintf：格式化并返回一个字符串，不输出。 测试代码 1234567891011121314//demo_3.gopackage mainimport ( &quot;fmt&quot;)func main() &#123; fmt.Print(&quot;输出到控制台不换行&quot;) fmt.Println(&quot;---&quot;) fmt.Println(&quot;输出到控制台并换行&quot;) fmt.Printf(&quot;name=%s,age=%d\\n&quot;, &quot;Tom&quot;, 30) fmt.Printf(&quot;name=%s,age=%d,height=%v\\n&quot;, &quot;Tom&quot;, 30, fmt.Sprintf(&quot;%.2f&quot;, 180.567))&#125; 运行结果：","categories":[{"name":"Go开发","slug":"Go开发","permalink":"http://example.com/categories/Go%E5%BC%80%E5%8F%91/"}],"tags":[]}],"categories":[{"name":"Go开发","slug":"Go开发","permalink":"http://example.com/categories/Go%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"程序员","slug":"程序员","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"}]}